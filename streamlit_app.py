import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go
import networkx as nx
from io import BytesIO

st.set_page_config(page_title="Academic Performance Visual Analysis", layout="wide")
st.title("Academic Performance Visual Analysis")
st.write("Upload your Excel report generated by the analysis script to explore detailed visualizations and tables.")

uploaded_file = st.file_uploader("Upload Excel File", type=["xlsx"])

if uploaded_file:
    xls = pd.ExcelFile(uploaded_file)
    sheet_names = xls.sheet_names
    # Load all sheets
    sheets = {name: pd.read_excel(xls, sheet_name=name) for name in sheet_names}
    
    # --- Master Sheet Table ---
    st.header("Master Sheet (All Student Data)")
    st.dataframe(sheets.get('Master Sheet', pd.DataFrame()))
    
    # --- Statistical Summary Table ---
    st.header("Statistical Summary Table")
    st.dataframe(sheets.get('Statistical Summary', pd.DataFrame()))
    
    # --- Subject Analysis Table ---
    st.header("Subject Analysis Table")
    st.dataframe(sheets.get('Subject Analysis', pd.DataFrame()))
    
    # --- Correlation Analysis Table ---
    st.header("Correlation Analysis Table")
    st.dataframe(sheets.get('Correlation Analysis', pd.DataFrame()))
    
    # --- GPA Distribution Visuals ---
    st.subheader("GPA Distribution and Performance Overview")
    master = sheets.get('Master Sheet', pd.DataFrame())
    if not master.empty and 'GPA' in master.columns:
        gpa = master['GPA'].dropna()
        col1, col2, col3 = st.columns(3)
        with col1:
            fig, ax = plt.subplots()
            sns.histplot(gpa, kde=True, ax=ax, color='skyblue')
            ax.axvline(gpa.mean(), color='red', linestyle='--', label=f"Mean: {gpa.mean():.2f}")
            ax.axvline(gpa.median(), color='green', linestyle='--', label=f"Median: {gpa.median():.2f}")
            ax.legend()
            st.pyplot(fig)
            st.caption("GPA Distribution Histogram with Mean/Median")
        with col2:
            fig, ax = plt.subplots()
            sns.boxplot(y=gpa, ax=ax)
            st.pyplot(fig)
            st.caption("Box Plot of GPA")
        with col3:
            fig, ax = plt.subplots()
            sns.violinplot(y=gpa, ax=ax)
            st.pyplot(fig)
            st.caption("Violin Plot of GPA")
        st.markdown(f"**Mean GPA:** {gpa.mean():.2f}  ")
        st.markdown(f"**Std Dev:** {gpa.std():.2f}  ")
        st.markdown(f"**Range:** {gpa.min():.2f} - {gpa.max():.2f}  ")
        st.markdown(f"**90th Percentile:** {np.percentile(gpa, 90):.2f}")
    
    # --- Grade Distribution Pie Chart ---
    st.subheader("Grade Distribution Pie Chart (All Subjects)")
    grade_cols = [col for col in master.columns if col.endswith(' - Total')]
    if grade_cols:
        all_grades = master[grade_cols].values.flatten()
        all_grades = pd.Series(all_grades).dropna()
        grade_counts = all_grades.value_counts()
        fig = px.pie(values=grade_counts.values, names=grade_counts.index, title="Grade Distribution Across All Subjects")
        st.plotly_chart(fig, use_container_width=True)
    
    # --- Subject Average Bar Chart ---
    st.subheader("Subject Average Grade Points")
    subject_analysis = sheets.get('Subject Analysis', pd.DataFrame())
    if not subject_analysis.empty and 'Average Grade Points' in subject_analysis.columns:
        sorted_subjects = subject_analysis.sort_values('Average Grade Points', ascending=False)
        fig = px.bar(sorted_subjects, x='Subject', y='Average Grade Points', title="Average Grade Points by Subject")
        st.plotly_chart(fig, use_container_width=True)
    
    # --- Pass/Fail Rate Comparison ---
    st.subheader("Pass/Fail Rate by Subject")
    if not subject_analysis.empty and 'Pass Count' in subject_analysis.columns and 'Fail Count' in subject_analysis.columns:
        pf_df = subject_analysis[['Subject', 'Pass Count', 'Fail Count']].set_index('Subject')
        fig = go.Figure()
        fig.add_trace(go.Bar(name='Pass', x=pf_df.index, y=pf_df['Pass Count']))
        fig.add_trace(go.Bar(name='Fail', x=pf_df.index, y=pf_df['Fail Count']))
        fig.update_layout(barmode='group', title="Pass/Fail Counts by Subject")
        st.plotly_chart(fig, use_container_width=True)
    
    # --- Grade Distribution by Subject (Stacked Bar) ---
    st.subheader("Grade Distribution by Subject (Stacked Bar)")
    if not subject_analysis.empty:
        grade_cols = [col for col in subject_analysis.columns if col.startswith('Grade ')]
        if grade_cols:
            stack_df = subject_analysis[['Subject'] + grade_cols].set_index('Subject')
            fig = go.Figure()
            for grade in grade_cols:
                fig.add_trace(go.Bar(name=grade.replace('Grade ', ''), x=stack_df.index, y=stack_df[grade]))
            fig.update_layout(barmode='stack', title="Grade Distribution by Subject")
            st.plotly_chart(fig, use_container_width=True)
    
    # --- Correlation Matrix Heatmap ---
    st.subheader("Correlation Matrix Heatmap")
    corr = sheets.get('Correlation Analysis', pd.DataFrame())
    if not corr.empty:
        corr_matrix = corr.set_index(corr.columns[0])
        fig, ax = plt.subplots(figsize=(10,8))
        sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', ax=ax)
        st.pyplot(fig)
    
    # --- Subject-to-Subject Correlation Network ---
    st.subheader("Subject-to-Subject Correlation Network")
    if not corr.empty:
        corr_matrix = corr.set_index(corr.columns[0])
        G = nx.Graph()
        for i, subj1 in enumerate(corr_matrix.index):
            for j, subj2 in enumerate(corr_matrix.columns):
                if i < j and abs(corr_matrix.iloc[i, j]) > 0.3:  # threshold for edge
                    G.add_edge(subj1, subj2, weight=corr_matrix.iloc[i, j])
        pos = nx.spring_layout(G, seed=42)
        edge_x = []
        edge_y = []
        for edge in G.edges():
            x0, y0 = pos[edge[0]]
            x1, y1 = pos[edge[1]]
            edge_x += [x0, x1, None]
            edge_y += [y0, y1, None]
        edge_trace = go.Scatter(x=edge_x, y=edge_y, line=dict(width=1, color='#888'), hoverinfo='none', mode='lines')
        node_x = []
        node_y = []
        node_text = []
        for node in G.nodes():
            x, y = pos[node]
            node_x.append(x)
            node_y.append(y)
            node_text.append(node)
        node_trace = go.Scatter(x=node_x, y=node_y, mode='markers+text', text=node_text, textposition='top center', marker=dict(size=20, color='skyblue'), hoverinfo='text')
        fig = go.Figure(data=[edge_trace, node_trace], layout=go.Layout(showlegend=False, hovermode='closest', margin=dict(b=20,l=5,r=5,t=40)))
        st.plotly_chart(fig, use_container_width=True)
    
    # --- Scatter Plot Matrix: GPA vs Each Subject ---
    st.subheader("Scatter Plot Matrix: GPA vs Each Subject")
    if not master.empty and 'GPA' in master.columns:
        grade_cols = [col for col in master.columns if col.endswith(' - Total')]
        if grade_cols:
            plot_df = master[['GPA'] + grade_cols].dropna()
            if not plot_df.empty:
                fig = px.scatter_matrix(plot_df, dimensions=plot_df.columns, title="Scatter Plot Matrix: GPA vs Subjects")
                st.plotly_chart(fig, use_container_width=True)
    
    st.success("Visual analysis complete! Explore the tabs and visuals above.")
else:
    st.info("Please upload an Excel file to begin analysis.") 